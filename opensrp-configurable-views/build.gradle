description = 'OpenSRP Configurable Views client library'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:" + androidToolsBuildGradle
        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

allprojects {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenLocal()
        maven {
            url 'https://maven.google.com'
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultPublishConfig !isReleaseBuild() ? "debug" : "release"

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }


}

dependencies {
    compile('org.smartregister:opensrp-client-core:1.1.6-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
    }

    compile project(':json2view')


    compile 'com.android.support:appcompat-v7:22.+'

    compile 'com.google.code.gson:gson:2.8.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.5.1'
    testCompile 'org.robolectric:shadows-multidex:3.5.1'

    // PowerMock
    def powerMockVersion = '1.7.3'
    testCompile "org.powermock:powermock-module-junit4:$powerMockVersion"
    testCompile "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testCompile "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testCompile "org.powermock:powermock-classloading-xstream:$powerMockVersion"

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}


Properties properties = new Properties()
properties.load(project.rootProject.file('json2view/gradle.properties').newDataInputStream())

task removeJson2ViewJar(type: Delete) {
    delete fileTree('libs') {
        include "${properties.getProperty('LIBRARY_NAME')}-*"
    }
}


task checkJson2ViewLatest {

    doLast {

        if (!file("libs/${properties.getProperty('LIBRARY_NAME')}-${properties.getProperty('VERSION_NAME')}.jar").exists()) {
            throw new GradleException("Error occurred : latest Json2View jar ${properties.getProperty('LIBRARY_NAME')}-${properties.getProperty('VERSION_NAME')}.jar is not present in the libs folder. \n" +
                    "Please rerun uploadArchive task or make sure to always run the :json2View:createJson2ViewJar task first before :uploadArchives")
        }
    }

}

preBuild.dependsOn checkJson2ViewLatest

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}


coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

apply from: '../maven.gradle'