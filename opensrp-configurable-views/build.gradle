description = 'OpenSRP Configurable Views client library'

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:" + androidToolsBuildGradle
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'

jacoco {
    toolVersion = "0.8.8"
}

android {
    namespace 'io.github.bluecodesystems.configurableviews'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    // Enable core library desugaring for Java 8+ APIs used by dependencies
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    lint {
        abortOnError false
    }


    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    testOptions {
       unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-Xmx1024m'
                jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.net=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/sun.security.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED'
                systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
                forkEvery = 1
                maxParallelForks = 1
            }
         }
    }
}

// Ensure sources and javadoc artifacts are created for Maven Central
android {
    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED'
    jvmArgs '--illegal-access=permit'
}

dependencies {
    // Core library desugaring for Java 8+ APIs on older Android devices
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    implementation('io.github.bluecodesystems:opensrp-client-core:6.2.0') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
    }

    implementation 'io.github.bluecodesystems:opensrp-plan-evaluator:1.7.0'
    implementation 'io.github.bluecodesystems:android-p2p-sync:0.4.1'

    implementation 'net.zetetic:android-database-sqlcipher:4.5.1'
    implementation 'androidx.sqlite:sqlite:2.2.0'

    implementation 'com.github.avocarrot:json2view:v1.0'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'

    implementation 'com.google.android.material:material:1.10.0'

    implementation 'com.google.code.gson:gson:2.8.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.robolectric:shadows-multidex:3.8'

    // PowerMock
    def powerMockVersion = '1.7.3'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"

    androidTestImplementation('androidx.test.espresso:espresso-core:3.5.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}


// Json2View now uses external dependency from jitpack instead of local jar

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml")
        html.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/html")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}


coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

// Maven Central publication (local bundle + optional remote publish)
afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = 'opensrp-configurable-views'
                version = project.VERSION_NAME
                from components.release

                pom {
                    name = 'opensrp-configurable-views'
                    description = project.findProperty('POM_SETTING_DESCRIPTION') ?: 'OpenSRP Client Configurable Views Library'
                    url = project.findProperty('POM_SETTING_URL') ?: 'https://github.com/OpenSRP/opensrp-client-configurable-views'

                    licenses {
                        license {
                            name = project.findProperty('POM_SETTING_LICENCE_NAME') ?: 'The Apache Software License, Version 2.0'
                            url = project.findProperty('POM_SETTING_LICENCE_URL') ?: 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = project.findProperty('POM_SETTING_LICENCE_DIST') ?: 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = project.findProperty('POM_SETTING_DEVELOPER_ID') ?: 'opensrp'
                            name = project.findProperty('POM_SETTING_DEVELOPER_NAME') ?: 'OpenSRP'
                        }
                    }

                    scm {
                        url = project.findProperty('POM_SETTING_SCM_URL') ?: 'https://github.com/OpenSRP/opensrp-client-configurable-views'
                        connection = project.findProperty('POM_SETTING_SCM_CONNECTION') ?: 'scm:git@github.com:OpenSRP/opensrp-client-configurable-views.git'
                        developerConnection = project.findProperty('POM_SETTING_SCM_DEV_CONNECTION') ?: 'scm:git@github.com:OpenSRP/opensrp-client-configurable-views.git'
                    }
                }
            }
        }

        // Local Central bundle repository (always available so related tasks exist)
        repositories {
            maven {
                name = 'CentralBundle'
                url = layout.buildDirectory.dir('central-bundle')
            }
        }
    }

    signing {
        // Use system GPG if requested; otherwise support in-memory keys
        if ((project.findProperty('useGpgCmd') ?: 'false').toString().toBoolean()) {
            useGpgCmd()
        } else if (project.hasProperty('signingKey') || project.hasProperty('signing.key')) {
            def key = project.findProperty('signingKey') ?: project.findProperty('signing.key')
            def pass = project.findProperty('signingPassword') ?: project.findProperty('signing.password')
            useInMemoryPgpKeys(key as String, pass as String)
        }
        sign publishing.publications.maven
    }

    // Utilities for Central bundle: checksums, zip, and layout print
    def centralGroup = project.group.toString().replace('.', '/')
    def centralArtifactId = 'opensrp-configurable-views'
    def centralVersion = project.VERSION_NAME
    def centralBaseDir = layout.buildDirectory.dir("central-bundle/${centralGroup}/${centralArtifactId}/${centralVersion}").get().asFile

    tasks.register('generateCentralBundleChecksums') {
        group = 'publishing'
        description = 'Generate MD5/SHA1/SHA256 checksums for Central bundle files.'
        dependsOn tasks.named('publishMavenPublicationToCentralBundleRepository')
        doLast {
            if (!centralBaseDir.exists()) return
            ant.checksum(fileext: '.md5', algorithm: 'MD5') { fileset(dir: centralBaseDir) { include(name: '**/*'); exclude(name: '**/*.md5'); exclude(name: '**/*.sha1'); exclude(name: '**/*.sha256') } }
            ant.checksum(fileext: '.sha1', algorithm: 'SHA-1') { fileset(dir: centralBaseDir) { include(name: '**/*'); exclude(name: '**/*.md5'); exclude(name: '**/*.sha1'); exclude(name: '**/*.sha256') } }
            ant.checksum(fileext: '.sha256', algorithm: 'SHA-256') { fileset(dir: centralBaseDir) { include(name: '**/*'); exclude(name: '**/*.md5'); exclude(name: '**/*.sha1'); exclude(name: '**/*.sha256') } }
        }
    }

    tasks.register('zipCentralBundle', Zip) {
        group = 'publishing'
        description = 'Zip the Central bundle directory for manual upload.'
        dependsOn tasks.named('generateCentralBundleChecksums')
        from layout.buildDirectory.dir('central-bundle')
        archiveFileName = "central-bundle-${centralArtifactId}-${centralVersion}.zip"
        destinationDirectory = layout.buildDirectory.dir('distributions')
    }

    tasks.register('printCentralBundleLayout') {
        group = 'publishing'
        description = 'Prints the Central bundle path for this artifact.'
        doLast {
            println "Local repo: ${centralBaseDir.absolutePath}"
            println "Zip will be at: ${layout.buildDirectory.dir('distributions').get().asFile}/central-bundle-${centralArtifactId}-${centralVersion}.zip"
        }
    }
}
